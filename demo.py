#!/usr/bin/env python3
"""
Script de d√©monstration pour le scraper Amazon.
Ce script montre comment utiliser le scraper de mani√®re programmatique.
"""

import asyncio
import os
import logging
from pathlib import Path

from app.scrape import AmazonScraper
from app.utils import setup_logging
from app.config import settings
from app.fetch import AmazonFetcher

# Configuration du logging
setup_logging("INFO")
logger = logging.getLogger(__name__)


async def demo_single_asin():
    """D√©monstration du scraping d'un ASIN unique."""
    print("üîç D√©monstration: Scraping d'un ASIN unique")
    print("=" * 50)
    
    scraper = AmazonScraper()
    
    # ASIN d'exemple (remplacez par un vrai ASIN)
    asin = "B08N5WRWNW"  # Exemple d'ASIN Amazon
    
    try:
        print(f"Scraping de l'ASIN: {asin}")
        stats = await scraper.scrape_asin(asin, max_pages=2)
        
        print(f"‚úÖ R√©sultats:")
        print(f"  - Avis r√©cup√©r√©s: {stats['total_reviews']}")
        print(f"  - Pages trait√©es: {stats['total_pages']}")
        print(f"  - Succ√®s: {stats['success']}")
        
        if stats['errors']:
            print(f"  - Erreurs: {len(stats['errors'])}")
            for error in stats['errors']:
                print(f"    ‚Ä¢ {error}")
        
        # R√©cup√©ration des avis pour affichage
        reviews = scraper.get_reviews_for_asin(asin, limit=3)
        if reviews:
            print(f"\nüìù Aper√ßu des avis:")
            for i, review in enumerate(reviews[:3], 1):
                print(f"  {i}. {review.get('review_title', 'Sans titre')}")
                print(f"     Rating: {review.get('rating', 'N/A')}/5")
                print(f"     Auteur: {review.get('reviewer_name', 'Anonyme')}")
                print(f"     Date: {review.get('review_date', 'N/A')}")
                print()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du scraping: {e}")


async def ensure_amazon_session_for_demo() -> bool:
    """V√©rifie/obtient une session Amazon utilisable pour le scraping c√¥t√© d√©mo.

    - Si un `storage_state.json` existe, on l'utilise tel quel.
    - Sinon, si `AMZ_EMAIL` et `AMZ_PASSWORD` sont d√©finis, tentative de connexion headless
      et sauvegarde de l'√©tat dans `settings.storage_state_path`.
    - Retourne True si une session valide est d√©tect√©e, False sinon.
    """
    print("\nüîê Pr√©paration de la session Amazon (d√©mo)")
    print("=" * 50)
    storage_state_path = getattr(settings, "storage_state_path", "./storage_state.json")
    if os.path.exists(storage_state_path):
        print(f"‚úì Session existante d√©tect√©e: {storage_state_path}")
        # V√©rifier que la session est encore valide
        fetcher = AmazonFetcher()
        await fetcher.start_browser()
        ctx = await fetcher.create_context()
        ok = await fetcher.is_session_valid(ctx)
        await ctx.close()
        await fetcher.stop_browser()
        if ok:
            print("‚úì Session valide")
            return True
        print("‚ö†Ô∏è  Session existante invalide ‚Äî tentative de reconnexion si identifiants fournis")

    email = settings.amz_email
    password = settings.amz_password
    if not email or not password:
        print("‚ÑπÔ∏è  Identifiants Amazon non fournis (AMZ_EMAIL/AMZ_PASSWORD). Le scraping tentera sans login.")
        return False

    fetcher = AmazonFetcher()
    # Forcer headless pour robustesse
    try:
        settings.headless = True
    except Exception:
        pass
    await fetcher.start_browser()
    ctx = await fetcher.create_context()
    try:
        await fetcher.ensure_logged_in(ctx)
        ok = await fetcher.is_session_valid(ctx)
        if ok:
            await ctx.storage_state(path=storage_state_path)
            print(f"‚úì Session enregistr√©e: {storage_state_path}")
            return True
        print("‚ùå Connexion non d√©tect√©e ‚Äî captcha/2FA possible.")
        return False
    finally:
        await ctx.close()
        await fetcher.stop_browser()


async def demo_batch_scraping():
    """D√©monstration du scraping en lot."""
    print("\nüì¶ D√©monstration: Scraping en lot")
    print("=" * 50)
    
    scraper = AmazonScraper()
    
    # Liste d'ASINs d'exemple
    asins = ["B08N5WRWNW", "B07FZ8S74R"]
    
    try:
        print(f"Scraping de {len(asins)} ASINs")
        results = await scraper.scrape_batch(asins, concurrency=1)
        
        print(f"‚úÖ R√©sultats du lot:")
        total_reviews = 0
        successful = 0
        
        for result in results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"  {status} {result['asin']}: {result['total_reviews']} avis")
            total_reviews += result['total_reviews']
            if result['success']:
                successful += 1
        
        print(f"\nüìä R√©sum√© global:")
        print(f"  - Total avis: {total_reviews}")
        print(f"  - ASINs r√©ussis: {successful}/{len(asins)}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du scraping en lot: {e}")


def demo_export():
    """D√©monstration de l'export des donn√©es."""
    print("\nüì§ D√©monstration: Export des donn√©es")
    print("=" * 50)
    
    scraper = AmazonScraper()
    
    try:
        # R√©cup√©ration de tous les avis
        all_reviews = scraper.get_all_reviews(limit=10)
        
        if not all_reviews:
            print("‚ÑπÔ∏è  Aucun avis trouv√© en base de donn√©es")
            return
        
        print(f"üìä {len(all_reviews)} avis trouv√©s en base")
        
        # Statistiques par ASIN
        asin_stats = {}
        for review in all_reviews:
            asin = review['asin']
            if asin not in asin_stats:
                asin_stats[asin] = {'count': 0, 'avg_rating': 0}
            asin_stats[asin]['count'] += 1
            if review['rating']:
                asin_stats[asin]['avg_rating'] += review['rating']
        
        # Calcul des moyennes
        for asin in asin_stats:
            count = asin_stats[asin]['count']
            asin_stats[asin]['avg_rating'] = asin_stats[asin]['avg_rating'] / count
        
        print(f"\nüìà Statistiques par ASIN:")
        for asin, stats in asin_stats.items():
            print(f"  - {asin}: {stats['count']} avis, rating moyen: {stats['avg_rating']:.1f}/5")
        
        # Exemple d'export CSV
        import csv
        output_file = "demo_export.csv"
        
        if all_reviews:
            with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = all_reviews[0].keys()
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(all_reviews)
            
            print(f"\nüíæ Export CSV cr√©√©: {output_file}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export: {e}")


def demo_health_check():
    """D√©monstration de la v√©rification du syst√®me."""
    print("\nüè• D√©monstration: V√©rification du syst√®me")
    print("=" * 50)
    
    try:
        # V√©rification de la base de donn√©es
        from app.db import engine
        with engine.connect() as conn:
            conn.execute("SELECT 1")
        print("‚úÖ Base de donn√©es: OK")
    except Exception as e:
        print(f"‚ùå Base de donn√©es: Erreur - {e}")
    
    try:
        # V√©rification de Playwright
        from playwright.sync_api import sync_playwright
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            browser.close()
        print("‚úÖ Playwright: OK")
    except Exception as e:
        print(f"‚ùå Playwright: Erreur - {e}")
    
    try:
        # V√©rification du r√©seau
        import requests
        response = requests.get("https://www.amazon.fr", timeout=10)
        if response.status_code == 200:
            print("‚úÖ R√©seau: OK")
        else:
            print(f"‚ö†Ô∏è  R√©seau: Code de statut {response.status_code}")
    except Exception as e:
        print(f"‚ùå R√©seau: Erreur - {e}")


async def main():
    """Fonction principale de d√©monstration."""
    print("üõí Amazon Reviews Scraper - D√©monstration")
    print("=" * 60)
    print("‚ö†Ô∏è  Note: Ceci est une d√©monstration. Respectez les CGU d'Amazon.")
    print("=" * 60)
    
    # V√©rification du syst√®me
    demo_health_check()
    
    # Pr√©parer/valider la session Amazon pour fiabiliser les exemples
    try:
        ok_session = await ensure_amazon_session_for_demo()
        if not ok_session:
            print("‚ÑπÔ∏è  Poursuite sans session authentifi√©e (acc√®s limit√© aux contenus publics).")
    except Exception as e:
        print(f"‚ö†Ô∏è  Pr√©paration session ignor√©e: {e}")
    
    # D√©monstrations
    await demo_single_asin()
    await demo_batch_scraping()
    demo_export()
    
    print("\nüéâ D√©monstration termin√©e!")
    print("üí° Pour plus d'informations, consultez le README.md")


if __name__ == "__main__":
    asyncio.run(main())
